services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"       # Puerto para acceso interno dentro de la red Docker
      - "29092:29092"     # Puerto para acceso externo desde la mÃ¡quina host
    environment:
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:9092,PLAINTEXT_EXTERNAL://192.168.131:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:9092,PLAINTEXT_EXTERNAL://192.168.131:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "customer_requests:1:1,taxi_responses:1:1,taxi_updates:1:1,taxi_instructions:1:1,map_updates:1:1"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  central:
    build:
      context: .
      dockerfile: docker/Dockerfile.ec_central
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=192.168.143:29092   # Kafka accesible dentro de la red interna
    volumes:
      - ./data:/data  # Monta el directorio de datos en el contenedor
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "python -c 'from kafka import KafkaProducer; KafkaProducer(bootstrap_servers=[\"kafka:9092\"])'"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      python ec_central.py 192.168.143:29092 8000
  
  dengine:
    build:
      context: .
      dockerfile: docker/Dockerfile.ec_de
    ports:
      - "9001:9001"
    depends_on:
      - kafka
      - central
    command: >
      python ec_de.py central 8000 192.168.143:29092 localhost 9000 1


  sensor:
    build:
      context: .
      dockerfile: docker/Dockerfile.ec_s
    depends_on:
      - dengine
    command: >
      python ec_s.py localhost 9000


  customer:
    build:
      context: .
      dockerfile: docker/Dockerfile.ec_customer
    depends_on:
      - kafka
    volumes:
      - ./data:/data  # Monta el directorio de datos en el contenedor
    environment:
      - KAFKA_BROKER=kafka:9092       # Cambiar de localhost a kafka para conectarse internamente a Kafka
      - CUSTOMER_ID=1
      - SERVICES_FILE=/data/services.txt
    command: >
      python ec_customer.py kafka:9092 1 /data/services.txt
