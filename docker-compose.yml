version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ip1:9092  # Cambia ip1 por la IP de PC 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "customer_requests:1:1,taxi_updates:1:1,taxi_instructions:1:1,map_updates:1:1"  # Define los tópicos
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  central:
    build:
      context: .
      dockerfile: docker/Dockerfile.central
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=ip1:9092  # Cambia ip1 por la IP de PC 1
    ports:
      - "5555:5555"  # Puerto para la autenticación de taxis por sockets
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure:3

  taxi:
    build:
      context: .
      dockerfile: docker/Dockerfile.taxi
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=ip1:9092  # Cambia ip1 por la IP de PC 1
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure:3

  customer:
    build:
      context: .
      dockerfile: docker/Dockerfile.customer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=ip1:9092  # Cambia ip1 por la IP de PC 1
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure:3
